{"version":3,"file":"token-auth.service.js","sourceRoot":"","sources":["../token-auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable, Subject} from 'rxjs';\n// @ts-ignore\nimport {Base64} from 'js-base64';\nimport {IToken, ITokenConfig, ITokenData} from './token-auth';\nimport {Router} from '@angular/router';\n\n@Injectable()\nexport class TokenAuthService {\n\n  public connected: boolean;\n  public token: string;\n  public refreshToken: string;\n  public iatToken: number;\n  public expToken: number;\n  public username: string;\n  public roles: string[];\n\n  constructor(@Inject('config') public config: ITokenConfig, private http: HttpClient, private router: Router) {\n    if (localStorage.getItem('token')) {\n      // @ts-ignore\n      const {token, refresh_token} = JSON.parse(localStorage.getItem('token'));\n      this.initializeToken(token, refresh_token);\n    }\n  }\n\n  public login(username: string, password: string): Subject<object> {\n    const login$ = new Subject<object>();\n    this.http.post(this.config.url.login, {username, password})\n      .subscribe((data: IToken) => {\n        this.updateToken(data.token, data.refresh_token);\n        this.router.navigate([this.config.path.login]);\n        login$.next({\n          iat: this.iatToken,\n          exp: this.expToken,\n          username: this.username,\n          roles: this.roles\n        });\n      }, (error) => {\n        login$.error(error);\n      });\n    return login$;\n  }\n\n  public logout(): void {\n    localStorage.removeItem('token');\n    document.location.href = this.config.path.logout;\n  }\n\n  public updateToken(token: string, refresh_token: string) {\n    localStorage.setItem('token', JSON.stringify({token, refresh_token}));\n    this.initializeToken(token, refresh_token);\n  }\n\n  private initializeToken(token: string, refresh_token: string) {\n    this.connected = true;\n    this.token = token;\n    this.refreshToken = refresh_token;\n    const splitToken = token.split('.');\n    const tokenDecode = Base64.decode(splitToken[1]);\n    const tokenData: ITokenData = JSON.parse(tokenDecode);\n    this.iatToken = tokenData.iat;\n    this.expToken = tokenData.exp;\n    this.username = tokenData.username;\n    this.roles = tokenData.roles;\n  }\n\n  public refresh(): Observable<object> {\n    return this.http.post(this.config.url.refresh, {refresh_token: this.refreshToken});\n  }\n\n  public tokenNotExpired(): boolean {\n    if (this.token && this.expToken) {\n      const dateNow = Math.floor(Date.now() / 1000);\n      return this.expToken > dateNow;\n    }\n    return false;\n  }\n\n}\n"]}