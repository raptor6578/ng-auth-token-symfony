{"version":3,"file":"token-auth.interceptor.js","sourceRoot":"","sources":["../token-auth.interceptor.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAwD,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AAC/G,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AAExD,OAAO,EAAC,QAAQ,EAAE,GAAG,EAAC,MAAM,gBAAgB,CAAC;AAM7C;IAEE,0BAAmB,IAAsB;QAAtB,SAAI,GAAJ,IAAI,CAAkB;IAAG,CAAC;yBAFlC,gBAAgB;IAIZ,0BAAS,GAAxB,UAAyB,OAAyB,EAAE,KAAa;QAE/D,OAAO,OAAO,CAAC,KAAK,CAAC;YACnB,UAAU,EAAE;gBACV,aAAa,EAAE,YAAU,KAAO;aACjC;SACF,CAAC,CAAC;IACL,CAAC;IAED,oCAAS,GAAT,UAAU,OAAyB,EAAE,IAAiB;QAAtD,iBAuBC;QAtBC,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE;YACtD,OAAO,IAAI,CAAC,MAAM,CAAC,kBAAgB,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;SAE1E;aAAM,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,OAAO,CAAC,GAAG,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE;YAEjF,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAC,IAAY;gBAClD,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;gBACtD,OAAO,IAAI,CAAC,MAAM,CAAC,kBAAgB,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC,CAAC;SAEP;aAAM;YACL,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,KAAqB;gBACzD,WAAW;YACb,CAAC,EAAE,UAAC,GAAQ;gBACV,iBAAiB;gBACjB,IAAI,GAAG,YAAY,iBAAiB,EAAE;oBACpC,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,IAAI,OAAO,CAAC,GAAG,KAAK,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE;wBACtE,KAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;qBACpB;iBACF;YACH,CAAC,CAAC,CAAC,CAAC;SACL;IACH,CAAC;;IApCU,gBAAgB;QAF5B,UAAU,EAAE;yCAIc,gBAAgB;OAF9B,gBAAgB,CAqC5B;IAAD,uBAAC;CAAA,AArCD,IAqCC;SArCY,gBAAgB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpErrorResponse } from '@angular/common/http';\nimport { TokenAuthService } from './token-auth.service';\nimport { Observable } from 'rxjs';\nimport {mergeMap, tap} from 'rxjs/operators';\nimport {IToken} from './token-auth';\n\n\n@Injectable()\n\nexport class TokenInterceptor implements HttpInterceptor {\n\n  constructor(public auth: TokenAuthService) {}\n\n  private static getHeader(request: HttpRequest<any>, token: string): HttpRequest<any> {\n\n    return request.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (this.auth.connected && this.auth.tokenNotExpired()) {\n      return next.handle(TokenInterceptor.getHeader(request, this.auth.token));\n\n    } else if (this.auth.refreshToken && request.url !== this.auth.config.url.refresh) {\n\n      return this.auth.refresh().pipe(mergeMap((data: IToken) => {\n          this.auth.updateToken(data.token, data.refresh_token);\n          return next.handle(TokenInterceptor.getHeader(request, data.token));\n        }));\n\n    } else {\n      return next.handle(request).pipe(tap((event: HttpEvent<any>) => {\n        // Response\n      }, (err: any) => {\n        // Response error\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 401 && request.url === this.auth.config.url.refresh) {\n            this.auth.logout();\n          }\n        }\n      }));\n    }\n  }\n}\n"]}